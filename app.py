# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rhtOJG6mH9jh2pKTCbnSHhcaCnxNj7va
"""

import streamlit as st
import torch
import joblib
import numpy as np
from geopy.geocoders import Nominatim

# Load model and scalers
model = torch.load("model.pkl", map_location=torch.device("cpu"))
model.eval()

scaler_X = joblib.load("scaler_X.pkl")
scaler_y = joblib.load("scaler_y.pkl")

st.title("üè† House Price Predictor - Version 2")

st.markdown("Enter property address and details to get estimated house price.")

# Address input
address = st.text_input("Enter Property Address")

if address:
    geolocator = Nominatim(user_agent="price_predictor")
    location = geolocator.geocode(address)

    if location:
        st.success(f"üìç Found location: {location.address}")
        latitude = location.latitude
        longitude = location.longitude
    else:
        st.error("Address not found. Please try again.")
        st.stop()
else:
    st.stop()

# Input fields
sqft = st.number_input("Living Area (sqft)", min_value=100, max_value=10000, value=1500)
beds = st.slider("Bedrooms", min_value=1, max_value=10, value=3)
baths = st.slider("Bathrooms", min_value=1, max_value=10, value=2)
lot_size = st.number_input("Lot Size (acres)", min_value=0.01, max_value=5.0, value=0.2)
year_built = st.slider("Year Built", min_value=1900, max_value=2025, value=2005)
fireplaces = st.slider("Number of Fireplaces", min_value=0, max_value=5, value=1)
parking_total = st.slider("Total Parking Spaces", min_value=0, max_value=10, value=2)
garage_spaces = st.slider("Garage Spaces", min_value=0, max_value=5, value=1)
stories = st.slider("Stories", min_value=1, max_value=4, value=2)
association_fee = st.number_input("Association Fee ($)", min_value=0, max_value=3000, value=0)
days_on_market = st.number_input("Days on Market", min_value=0, max_value=365, value=30)

if st.button("Predict Price"):
    # Input vector in the same order as training
    input_data = np.array([[
        sqft, beds, baths, lot_size, year_built,
        fireplaces, parking_total, garage_spaces,
        stories, association_fee, days_on_market,
        latitude, longitude
    ]])

    # Scale input
    input_scaled = scaler_X.transform(input_data)

    # Convert to tensor
    input_tensor = torch.FloatTensor(input_scaled)

    # Predict
    with torch.no_grad():
        prediction_scaled = model(input_tensor).item()

    # Inverse transform the prediction
    predicted_price = scaler_y.inverse_transform([[prediction_scaled]])[0][0]

    st.subheader("üè° Prediction Result")
    st.success(f"üíµ Estimated Home Price: ${predicted_price:,.2f}")
    st.markdown(f"üìå Latitude: `{latitude}`  |  Longitude: `{longitude}`")

